diff -Nurd freeciv/common/actions.c freeciv/common/actions.c
--- freeciv/common/actions.c	2022-09-24 17:15:22.220555716 +0300
+++ freeciv/common/actions.c	2022-09-24 17:16:26.501006038 +0300
@@ -2721,8 +2721,8 @@
   struct requirement *claimed_req;
   struct requirement tile_is_claimed;
   struct requirement tile_is_unclaimed;
-
   struct action *paction = action_by_number(enabler->action);
+  struct astring astr;
 
   if (action_get_target_kind(paction) != ATK_TILE) {
     /* Not tile targeted */
@@ -2766,7 +2766,9 @@
            * so this is implicit.) */
           N_("Requirement {%s} of action \"%s\" implies a claimed "
              "tile. No diplomatic relation to Nature."),
-          req_to_fstring(local_diplrel), action_rule_name(paction));
+          req_to_fstring(local_diplrel, &astr), action_rule_name(paction));
+
+  astr_free(&astr);
 
   /* The solution is to add the requirement that the tile is claimed */
   out->suggested_solutions[0].req = tile_is_claimed;
@@ -2790,8 +2792,9 @@
   struct requirement *local_diplrel;
   struct requirement *unclaimed_req;
   struct requirement tile_is_claimed;
-
   struct action *paction = action_by_number(enabler->action);
+  struct astring astr1;
+  struct astring astr2;
 
   if (action_get_target_kind(paction) != ATK_TILE) {
     /* Not tile targeted */
@@ -2828,7 +2831,11 @@
           N_("In enabler for \"%s\": No diplomatic relation to Nature."
              " Requirements {%s} and {%s} contradict each other."),
           action_rule_name(paction),
-          req_to_fstring(local_diplrel), req_to_fstring(unclaimed_req));
+          req_to_fstring(local_diplrel, &astr1),
+          req_to_fstring(unclaimed_req, &astr2));
+
+  astr_free(&astr1);
+  astr_free(&astr2);
 
   /* The first suggestion is to remove the diplrel */
   out->suggested_solutions[0].req = *local_diplrel;
diff -Nurd freeciv/common/requirements.c freeciv/common/requirements.c
--- freeciv/common/requirements.c	2022-09-24 17:15:22.232555800 +0300
+++ freeciv/common/requirements.c	2022-09-24 17:16:26.501006038 +0300
@@ -762,19 +762,24 @@
 /**********************************************************************//**
   Returns the given requirement as a formatted string ready for printing.
   Does not care about the 'quiet' property.
+
+  astring does not need to be initialized before the call,
+  but caller needs to call astr_free() for it once the returned
+  string is no longer needed.
 **************************************************************************/
-const char *req_to_fstring(const struct requirement *req)
+const char *req_to_fstring(const struct requirement *req,
+                           struct astring *astr)
 {
-  struct astring printable_req = ASTRING_INIT;
+  astr_init(astr);
 
-  astr_set(&printable_req, "%s%s %s %s%s",
+  astr_set(astr, "%s%s %s %s%s",
            req->survives ? "surviving " : "",
            req_range_name(req->range),
            universal_type_rule_name(&req->source),
            req->present ? "" : "!",
            universal_rule_name(&req->source));
 
-  return astr_str(&printable_req);
+  return astr_str(astr);
 }
 
 /**********************************************************************//**
@@ -4132,6 +4137,7 @@
 {
   const char *req_vec_description;
   static char buf[MAX_LEN_NAME * 3];
+  struct astring astr;
 
   fc_assert_ret_val(change, NULL);
   fc_assert_ret_val(req_vec_change_operation_is_valid(change->operation),
@@ -4159,8 +4165,9 @@
                  * like "actor_reqs" */
                 _("%s %s from %s"),
                 req_vec_change_operation_name(change->operation),
-                req_to_fstring(&change->req),
+                req_to_fstring(&change->req, &astr),
                 req_vec_description);
+    astr_free(&astr);
     break;
   case RVCO_APPEND:
     fc_snprintf(buf, sizeof(buf),
@@ -4172,8 +4179,9 @@
                  * like "actor_reqs" */
                 _("%s %s to %s"),
                 req_vec_change_operation_name(change->operation),
-                req_to_fstring(&change->req),
+                req_to_fstring(&change->req, &astr),
                 req_vec_description);
+    astr_free(&astr);
     break;
   case RVCO_NOOP:
     fc_snprintf(buf, sizeof(buf),
@@ -4340,10 +4348,15 @@
 
       if (are_requirements_contradictions(preq, nreq)) {
         struct req_vec_problem *problem;
+        struct astring astr;
+        struct astring nastr;
 
         problem = req_vec_problem_new(2,
             N_("Requirements {%s} and {%s} contradict each other."),
-            req_to_fstring(preq), req_to_fstring(nreq));
+            req_to_fstring(preq, &astr), req_to_fstring(nreq, &nastr));
+
+        astr_free(&astr);
+        astr_free(&nastr);
 
         /* The solution is to remove one of the contradictions. */
         problem->suggested_solutions[0].operation = RVCO_REMOVE;
@@ -4419,6 +4432,7 @@
 
     if (universal_never_there(&preq->source)) {
       struct req_vec_problem *problem;
+      struct astring astr;
 
       if (preq->present) {
         /* The requirement vector can never be fulfilled. Removing the
@@ -4431,13 +4445,16 @@
         req_vec_problem_new(0,
                   N_("Requirement {%s} requires %s but it will never be"
                      " there."),
-                  req_to_fstring(preq), universal_rule_name(&preq->source));
+                  req_to_fstring(preq, &astr), universal_rule_name(&preq->source));
+        astr_free(&astr);
         continue;
       }
 
       problem = req_vec_problem_new(1,
           N_("Requirement {%s} mentions %s but it will never be there."),
-          req_to_fstring(preq), universal_rule_name(&preq->source));
+          req_to_fstring(preq, &astr), universal_rule_name(&preq->source));
+
+      astr_free(&astr);
 
       /* The solution is to remove the reference to the missing
        * universal. */
@@ -4492,10 +4509,15 @@
 
       if (are_requirements_equal(preq, nreq)) {
         struct req_vec_problem *problem;
+        struct astring astr;
+        struct astring nastr;
 
         problem = req_vec_problem_new(2,
             N_("Requirements {%s} and {%s} are the same."),
-            req_to_fstring(preq), req_to_fstring(nreq));
+            req_to_fstring(preq, &astr), req_to_fstring(nreq, &nastr));
+
+        astr_free(&astr);
+        astr_free(&nastr);
 
         /* The solution is to remove one of the redundant requirements. */
         problem->suggested_solutions[0].operation = RVCO_REMOVE;
diff -Nurd freeciv/common/requirements.h freeciv/common/requirements.h
--- freeciv/common/requirements.h	2022-09-24 17:15:22.232555800 +0300
+++ freeciv/common/requirements.h	2022-09-24 17:16:26.501006038 +0300
@@ -18,6 +18,9 @@
 extern "C" {
 #endif /* __cplusplus */
 
+/* utility */
+#include "astring.h"
+
 /* common */
 #include "fc_types.h"
 
@@ -114,7 +117,8 @@
 struct requirement req_from_str(const char *type, const char *range,
                                 bool survives, bool present, bool quiet,
                                 const char *value);
-const char *req_to_fstring(const struct requirement *req);
+const char *req_to_fstring(const struct requirement *req,
+                           struct astring *astr);
 
 void req_get_values(const struct requirement *req, int *type,
                     int *range, bool *survives, bool *present, bool *quiet,
@@ -126,7 +130,7 @@
 void req_copy(struct requirement *dst, const struct requirement *src);
 
 bool are_requirements_equal(const struct requirement *req1,
-			    const struct requirement *req2);
+                            const struct requirement *req2);
 
 bool are_requirements_contradictions(const struct requirement *req1,
                                      const struct requirement *req2);
diff -Nurd freeciv/server/rssanity.c freeciv/server/rssanity.c
--- freeciv/server/rssanity.c	2022-09-24 17:15:23.432564189 +0300
+++ freeciv/server/rssanity.c	2022-09-24 17:17:41.077530552 +0300
@@ -493,6 +493,7 @@
   int one_tile = -1; /* TODO: Determine correct value from effect.
                       *       -1 disables checking */
   els_data *els = (els_data *)data;
+  struct astring astr;
 
   /* TODO: Refactor this to be more reusable when we check
    *       for more than one base effect. */
@@ -513,8 +514,9 @@
           log_error("The effect Action_Success_Target_Move_Cost has the"
                     " requirement {%s} but the action %s isn't"
                     " (single) unit targeted.",
-                    req_to_fstring(preq),
+                    req_to_fstring(preq, &astr),
                     universal_rule_name(&preq->source));
+          astr_free(&astr);
           return FALSE;
         }
       }
@@ -527,8 +529,9 @@
           log_error("The effect Action_Success_Actor_Move_Cost has the"
                     " requirement {%s} but the action %s isn't"
                     " performed by a unit.",
-                    req_to_fstring(preq),
+                    req_to_fstring(preq, &astr),
                     universal_rule_name(&preq->source));
+          astr_free(&astr);
           return FALSE;
         }
       }
@@ -544,8 +547,9 @@
                     " requirement {%s} but the action %s doesn't"
                     " roll the dice to see if it fails.",
                     effect_type_name(peffect->type),
-                    req_to_fstring(preq),
+                    req_to_fstring(preq, &astr),
                     universal_rule_name(&preq->source));
+          astr_free(&astr);
           return FALSE;
         }
       }
@@ -851,6 +855,8 @@
                       advance_rule_name(padvance));
         ok = FALSE;
       } else if (!is_req_unchanging(preq)) {
+        struct astring astr;
+
         /* Only support unchanging requirements until the reachability code
          * can handle it and the tech tree can display changing
          * requirements. */
@@ -860,7 +866,8 @@
                       " the game. Changing requirements aren't supported"
                       " yet.",
                       advance_rule_name(padvance),
-                      req_to_fstring(preq));
+                      req_to_fstring(preq, &astr));
+        astr_free(&astr);
         ok = FALSE;
       }
     } requirement_vector_iterate_end;
@@ -1231,6 +1238,8 @@
       requirement_vector_iterate(&(enabler->target_reqs), preq) {
         if (preq->source.kind == VUT_DIPLREL
             && preq->range == REQ_RANGE_LOCAL) {
+          struct astring astr;
+
           /* A Local DiplRel requirement can be expressed as a requirement
            * in actor_reqs. Demand that it is there. This avoids breaking
            * code that reasons about actions. */
@@ -1240,7 +1249,8 @@
                         "section \"Requirement vector rules\" in "
                         "doc/README.actions",
                         action_id_rule_name(act),
-                        req_to_fstring(preq));
+                        req_to_fstring(preq, &astr));
+          astr_free(&astr);
           ok = FALSE;
         }
       } requirement_vector_iterate_end;
diff -Nurd freeciv/tools/ruleutil/rulesave.c freeciv/tools/ruleutil/rulesave.c
--- freeciv/tools/ruleutil/rulesave.c	2022-09-24 17:15:23.448564301 +0300
+++ freeciv/tools/ruleutil/rulesave.c	2022-09-24 17:16:26.569006516 +0300
@@ -533,8 +533,11 @@
 
       protecor_flag[i++] = req->source.value.unitflag;
     } else if (unexpected_req(req)) {
+      struct astring astr;
+
       log_error("Can't handle action auto performer requirement %s",
-                req_to_fstring(req));
+                req_to_fstring(req, &astr));
+      astr_free(&astr);
 
       return FALSE;
     }
